// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "messaging-app/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// GetChatSessions provides a mock function with given fields: ctx, userID
func (_m *MessageRepository) GetChatSessions(ctx context.Context, userID string) ([]domain.ChatSession, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatSessions")
	}

	var r0 []domain.ChatSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.ChatSession, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.ChatSession); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ChatSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageByID provides a mock function with given fields: ctx, messageID
func (_m *MessageRepository) GetMessageByID(ctx context.Context, messageID domain.MessageID) (*domain.Message, error) {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageByID")
	}

	var r0 *domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.MessageID) (*domain.Message, error)); ok {
		return rf(ctx, messageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.MessageID) *domain.Message); ok {
		r0 = rf(ctx, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.MessageID) error); ok {
		r1 = rf(ctx, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: ctx, chatID, cursor, limit
func (_m *MessageRepository) GetMessages(ctx context.Context, chatID string, cursor time.Time, limit int) ([]domain.Message, error) {
	ret := _m.Called(ctx, chatID, cursor, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) ([]domain.Message, error)); ok {
		return rf(ctx, chatID, cursor, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) []domain.Message); ok {
		r0 = rf(ctx, chatID, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, int) error); ok {
		r1 = rf(ctx, chatID, cursor, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnreadCount provides a mock function with given fields: ctx, userID, chatID
func (_m *MessageRepository) GetUnreadCount(ctx context.Context, userID string, chatID string) (int, error) {
	ret := _m.Called(ctx, userID, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetUnreadCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, userID, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, userID, chatID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkChatAsRead provides a mock function with given fields: ctx, userID, chatID
func (_m *MessageRepository) MarkChatAsRead(ctx context.Context, userID string, chatID string) error {
	ret := _m.Called(ctx, userID, chatID)

	if len(ret) == 0 {
		panic("no return value specified for MarkChatAsRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkMessagesUpToRead provides a mock function with given fields: ctx, msg
func (_m *MessageRepository) MarkMessagesUpToRead(ctx context.Context, msg domain.MessageID) (int64, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for MarkMessagesUpToRead")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.MessageID) (int64, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.MessageID) int64); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.MessageID) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMessage provides a mock function with given fields: ctx, message
func (_m *MessageRepository) SaveMessage(ctx context.Context, message domain.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
