// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "messaging-app/internal/domain"

	mock "github.com/stretchr/testify/mock"

	ports "messaging-app/internal/ports"
)

// MessagePublisher is an autogenerated mock type for the MessagePublisher type
type MessagePublisher struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *MessagePublisher) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishMessage provides a mock function with given fields: ctx, message
func (_m *MessagePublisher) PublishMessage(ctx context.Context, message domain.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishStatusUpdate provides a mock function with given fields: ctx, userID, statusUpdate
func (_m *MessagePublisher) PublishStatusUpdate(ctx context.Context, userID string, statusUpdate ports.StatusUpdate) error {
	ret := _m.Called(ctx, userID, statusUpdate)

	if len(ret) == 0 {
		panic("no return value specified for PublishStatusUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ports.StatusUpdate) error); ok {
		r0 = rf(ctx, userID, statusUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessagePublisher creates a new instance of MessagePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagePublisher {
	mock := &MessagePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
